function path_len() {
    path_length=$1
    # Set the new path in the title.
    default_title
}

function display_path() {
    echo " %{$fg[blue]%}%$path_length~%{$reset_color%}"
}

function return_status() {
    if [ $? -ne 0 ]; then
        echo "%{$fg[red]%} x %{$reset_color%}"
    fi
}

function base_prompt() {
    local display_user="%{$fg[green]%}%n%{$reset_color%}"
    local display_host="%{$fg[red]%}%M%{$reset_color%}"
    echo "$display_user@$display_host"
}

function display_git() {
    # Check if we are actually in a git repo.
    if git rev-parse --git-dir > /dev/null 2>&1; then
        # Capture the output of the "git status" command.
        local git_status="$(git status 2> /dev/null)"
        branch_pattern="On branch ([^[:space:]]*)"
        if [[ ${git_status} =~ ${branch_pattern} ]]; then
            branch=${match[1]}
        fi

        # Set the status color based on how clean the working directory is.
        if [[ ${git_status} =~ "working directory clean" ]]; then
            state="$fg[green]"
        elif [[ $git_status =~ "Changes to be committed" ]]; then
            state="$fg[yellow]"
        elif [[ $git_status =~ "Initial commit" ]]; then
            state="$fg[white]"
        else
            state="$fg[red]"
        fi

        # Set arrow icon based on status against remote.
        remote_pattern="Your branch is (ahead|behind)"
        diverge_pattern="Your branch and (.*) have diverged"
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${match[1]} == "ahead" ]]; then
                remote=" >>"
            elif [[ ${match[1]} == "behind" ]]; then
                remote=" <<"
            fi

            # Set the number of commits we are behind ahead while we are at it.
            commits_pattern="([0-9]+) (commit|commits)"
            if [[ ${git_status} =~ ${commits_pattern} ]]; then
                remote="${remote} ${match[1]} ${match[2]}"
            fi
        elif [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote=" ??"
        else
            remote=""
        fi

        echo " $state($branch)$remote$reset_color"
    fi
}

function virtualenv_info() {
    [ $VIRTUAL_ENV ] && echo "%{$fg[yellow]%}[`basename $VIRTUAL_ENV`]%{$reset_color%} "
}

function command_runtime() {
    if [ $timer_show ] && [ $timer_show -gt 0 ]; then
        echo "%{$fg[black]%} ${timer_show}s%{$reset_color%}"
    fi
}

function preexec() {
    timer=${timer:-$SECONDS}
}

function precmd() {
    default_title
    if [ $timer ]; then
        timer_show=$(($SECONDS - $timer))
        unset timer
    fi
}

function default_title() {
    print -Pn '\e]2;%$path_length~\a'
}
