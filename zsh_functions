function path_len() {
    path_length=$1
    # Set the new path in the title.
    default_title
}

function display_path() {
    echo " %{$fg[blue]%}%$path_length~%{$reset_color%}"
}

function return_status() {
    if (($? != 0)); then
        echo "%{$fg[red]%} x %{$reset_color%}"
    fi
}

function base_prompt() {
    local display_user="%{$fg[green]%}%n%{$reset_color%}"
    local display_host="%{$fg[red]%}%M%{$reset_color%}"
    echo "$display_user@$display_host"
}

function display_git() {
    # Check if we are actually in a git repo.
    if git rev-parse --git-dir > /dev/null 2>&1; then
        # Capture the output of the "git status" command.
        local git_status="$(git status 2> /dev/null)"
        local branch_pattern="On branch ([^[:space:]]*)"
        if [[ ${git_status} =~ ${branch_pattern} ]]; then
            branch=${match[1]}
        fi

        # Set the status color based on how clean the working directory is.
        if [[ ${git_status} =~ "working tree clean" ]]; then
            state="$fg[green]"
        elif [[ $git_status =~ "Changes to be committed" ]]; then
            state="$fg[yellow]"
        elif [[ $git_status =~ "No commits yet" ]]; then
            state="$fg[white]"
        else
            state="$fg[red]"
        fi

        # Set arrow icon based on status against remote.
        local remote_pattern="Your branch is (ahead|behind)"
        local diverge_pattern="Your branch and (.*) have diverged"
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${match[1]} == "ahead" ]]; then
                remote=" >>"
            elif [[ ${match[1]} == "behind" ]]; then
                remote=" <<"
            fi

            # Set the number of commits we are behind ahead while we are at it.
            local commits_pattern="([0-9]+) (commit|commits)"
            if [[ ${git_status} =~ ${commits_pattern} ]]; then
                remote="${remote} ${match[1]} ${match[2]}"
            fi
        elif [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote=" ??"
        else
            remote=""
        fi

        local git_objects="$(git count-objects 2> /dev/null)"
        local objects_pattern="([0-9]+)"
        if [[ ${git_objects} =~ ${objects_pattern} ]]; then
            object_count="${match[1]}"
            if [ ${object_count} -le 1000 ]; then
                object_count=""
            else
                object_count=" $fg[cyan]${object_count} objects"
            fi
        else
            object_count=""
        fi

        echo " $state($branch)$remote$object_count$reset_color"
    fi
}

function shell_with_venv_info() {
    if [ $VIRTUAL_ENV ]; then
        echo "%{$fg[yellow]%}|>%{$reset_color%}"
    else
        echo ">"
    fi
}

function command_runtime() {
    timer_remainder=$timer_show
    display_time=""
    hour=$((60*60))
    minute=$((60))
    if ((timer_remainder>=$hour)); then
        hours_elapsed=$(echo $(($timer_remainder/$hour)))
        timer_remainder=$(echo $(($timer_remainder%$hour)))
        display_time="${display_time}${hours_elapsed}h"
    fi
    if ((timer_remainder>=$minute)); then
        minutes_elapsed=$(echo $(($timer_remainder/$minute)))
        timer_remainder=$(echo $(($timer_remainder%$minute)))
        display_time="${display_time}${minutes_elapsed}m"
    fi
    if ((timer_remainder>0)); then
        display_time="${display_time}${timer_remainder}s"
    fi
    echo "%{$fg_bold[black]%} ${display_time}%{$reset_color%}"
}

function preexec() {
    timer=${timer:-$SECONDS}
}

function precmd() {
    default_title
    if [ $timer ]; then
        timer_show=$(($SECONDS - $timer))
        unset timer
    fi
}

function default_title() {
    print -Pn '\e]2;%$path_length~\a'
}

function chpwd() {
    if [ -r $PWD/.env ]; then
        source $PWD/.env
    fi
}

function mkvenv() {
    if [ "$1" != "" ]; then
        $1 -m venv .venv
    else
        python -m venv .venv
    fi
    activate
}

function activate() {
    if [ -r $PWD/.venv ]; then
        source $PWD/.venv/bin/activate
    fi
}
